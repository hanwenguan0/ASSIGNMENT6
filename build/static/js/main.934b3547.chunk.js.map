{"version":3,"sources":["api/RedditClient.js","components/RepoModel.js","components/Modal.js","components/Follow.js","App.js","serviceWorker.js","index.js"],"names":["fetchPostsByRepo","url","console","log","fetch","then","res","json","body","map","data","name","nameurl","html_url","description","parserepoResponse","RepoModel","repoposts","useState","posts","setPosts","useEffect","filteredPosts","filter","post","className","tabIndex","type","data-dismiss","aria-label","aria-hidden","href","modalContainer","document","getElementById","Modal","postsfromapp","close","profileposts","setprofilePosts","email","location","parseprofileResponse","createPortal","data-toggle","data-target","style","display","onClick","deletefollowers","method","App","isConfirm","setisConfirm","isConfirm2","setisConfirm2","showfunction","hidefunction","showfunction2","hidefunction2","login","avatar_url","id","repos_url","parsePostResponse","key","src","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.934b3547.chunk.js","sourcesContent":["/**\n * Given subreddit's name, issue api req and parse response with\n * `title`, `score`, `subredditSubscribers`, and `subredditId`\n *\n * @param subredditName - input subreddit name ie `javascript`\n * @return promise response obj with above properties\n */\nexport default function fetchPosts() {\n  return fetch(`https://api.github.com/orgs/nodejs/members`)\n    .then((res) => res.json())\n    .then((body) => parsePostResponse(body));\n}\nfunction parsePostResponse(body) {\n  return body.map((data) => {\n    return {\n      url: data.url,\n      login: data.login,\n      avatar_url: data.avatar_url,\n      id: data.id,\n      repos_url: data.repos_url\n    };\n  });\n}\n/**\n * Gets posts by profile\n * @return promise containing response obj with below props\n */\nexport function fetchPostsByProfile(url) {\n  return fetch(`${url}`)\n    .then((res) => res.json())\n    .then((body) => parseprofileResponse(body));\n}\nfunction parseprofileResponse(body) {\n  return {\n    email: body.email,\n    name: body.name,\n    location: body.location\n  }\n}\n/**\n * Gets posts by repo\n * @return promise containing response obj with below props\n */\n\nexport function fetchPostsByRepo(url) {\n  console.log(url)\n  return fetch(`${url}`)\n    .then((res) => res.json())\n    .then((body) => parserepoResponse(body));\n}\nfunction parserepoResponse(body) {\n  return body.map((data) => {\n    console.log(data)\n    return {\n      name: data.name,\n      nameurl: data.html_url,\n      description: data.description\n    };\n  });\n}\n\n","import React, { useState, useEffect } from \"react\";\nimport { fetchPostsByRepo } from \"../api/RedditClient\";\n\nexport default function RepoModel({repoposts}) {\n  console.log(repoposts.url)\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchPostsByRepo(repoposts.url).then((posts) => {\n      const filteredPosts = posts.filter((post) => {\n        return post\n      });\n\n      setPosts(filteredPosts);\n    });\n  }, []);\n\n  return (\n\n    <div className=\"modal\" tabIndex=\"-1\">\n      <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">Repo Modal</h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            <p>{posts.map(post => (\n              <div>\n                <a href={post.nameurl}>{post.name}</a>\n                <p>{post.description}</p>\n              </div>\n            ))}</p>\n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n            <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { fetchPostsByProfile } from \"../api/RedditClient\";\n\nconst modalContainer = document.getElementById(\"modal-container\");\n\nexport default function Modal({ postsfromapp, close }) {\n  const [profileposts, setprofilePosts] = useState([]);\n  useEffect(() => {\n    fetchPostsByProfile(postsfromapp.url).then((post) => {\n      console.log(postsfromapp.url)\n      setprofilePosts(post);\n    });\n  }, []);\n\n  return createPortal(\n    <>\n      <button type=\"button\" className=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\">Open Modal</button>\n      <div className=\"modal-backdrop show\"></div>\n      <div className=\"modal\" tabIndex=\"-1\" style={{ display: \"block\" }}>\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\">{profileposts.url}</h5>\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n                onClick={close}\n              >\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n                <div>\n                  <p>{profileposts.name}</p>\n                  <p>{profileposts.email}</p>\n                  <p>{profileposts.location}</p>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                onClick={close}\n              >\n                Okay\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>,\n    modalContainer\n  );\n}","import React, { useState, useEffect } from \"react\";\n\nexport function addfollowers(name) {\n  fetch(`/follower-number`,{\n    method:\"post\",\n    body:name\n  })\n}\n\nexport function deletefollowers(name) {\n  return fetch(`/follower-number`, {\n    method: \"delete\",\n    body:name\n  });\n}","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n\nimport RepoModal from \"./components/RepoModel\"\nimport fetchPosts from \"./api/RedditClient\"\nimport Modal from \"./components/Modal\"\nimport { addfollowers, deletefollowers } from \"./components/Follow\"\n\n\nexport default function App() {\n  const [isConfirm, setisConfirm] = useState(false)\n  const [isConfirm2, setisConfirm2] = useState(false)\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetchPosts().then((posts) => {\n      const filteredPosts = posts.filter((post) => {\n        return post\n      });\n      setPosts(filteredPosts);\n    });\n  }, []);\n\n  function showfunction() {\n    setisConfirm(true)\n  }\n  function hidefunction() {\n    setisConfirm(false)\n  }\n\n  function showfunction2() {\n    setisConfirm2(true)\n  }\n  function hidefunction2() {\n    setisConfirm2(false)\n  }\n  \n\n  return (\n    <div className=\"d-flex flex-wrap justify-content-between\">\n      {posts.map((post) => {\n        return (\n          <div>\n\n            <div>\n              {isConfirm && <Modal key={post.id} postsfromapp={post} close={hidefunction} />}\n              <li>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={showfunction}>{post.login}</button>\n                <img src={post.avatar_url} className=\"card-img-top\" />\n              </li>\n            </div>\n\n            <div>\n              <li>\n                {isConfirm2 && <RepoModal key={post.id} repoposts={post} close={hidefunction2} />}\n                <button type=\"button\" className=\"btn btn-primary\" onClick={showfunction2}>{post.login}'s Repo</button>\n              </li>\n            </div>\n\n            <div>\n              <li>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={addfollowers(post.name)} >Follow</button>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={deletefollowers(post.name)}>Unfollow</button>\n              </li>\n              <li></li>\n            </div>\n\n          </div>\n        )\n      })}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}